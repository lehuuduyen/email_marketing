<?php

namespace App\Modules\User\Http\Controllers;

use App\Api\V1\Controllers\BaseController;
use App\Modules\User\Models\permission_role;
use Illuminate\Http\Request;

use App\Http\Requests;
use App\Http\Controllers\Controller;
use App\Modules\User\Models\role;
use Yajra\Datatables\Datatables;
use App\Modules\User\Models\permission;
class RoleApiController extends BaseController
{
    public function update(Request $request,$id )
    {
        $data=role::find($id);
        $data->name=$request->name;
        $data->display_name=$request->display_name;
        $data->description=$request->description;
        $data->save();
        if(count($request->permission)>0) {
            \DB::delete('delete from permission_role where role_id = '.$id);
            foreach ($request->permission as $value)
            {
                $permission_role = new permission_role();
                $permission_role->permission_id =$value;
                $permission_role->role_id =$data->id;
                $permission_role->save();
            }

        }

    }

    public function store(Request $request){
        \DB::beginTransaction();
        try {
            $data_add              = new role($request->all());
            $data_add->save();
        } catch (\Exception $e) {
            \DB::rollBack();
            return $this->response->errorInternal($e->getMessage());
        }
        if(count($request->permission)>0){
            try {
                foreach ($request->permission as $value)
                {
                    $permission_role = new permission_role();
                    $permission_role->permission_id =$value;
                    $permission_role->role_id =$data_add->id;
                    $permission_role->save();
                }
            } catch (\Exception $e) {
                \DB::rollBack();
                return $this->response->errorInternal($e->getMessage());
            }
        }
        \DB::commit();
        return $this->responseCreated($request);
    }
    public function anyData(){
        $data     =\DB::table('roles')
            ->get();
//            ->with('user');
        $dbResult = Datatables::of($data)
            ->addColumn('permissions', function ($data) {
                return \DB::table('permissions')
                    ->join('permission_role', 'permission_role.permission_id', 'permissions.id')
                    ->where('permission_role.role_id', $data->id)
                    ->pluck('name')
                    ->toArray();
            })
//            ->addColumn('type_name', function ($dat) {
//                $str = '';
//                if ($dat->type == User::$TYPE_WORK_FULL_TIME) {
//                    $str = 'Nhân Viên Chính Thức';
//                }
//                if ($dat->type == User::$TYPE_WORK_PART_TIME) {
//                    $str = 'Cộng tác viên';
//                }
//
//                return $str;
//            })
            ->addColumn('action', function ($data) {
                $action = '<a href="" class="btn btn-xs btn-success" title="Chi tiết"><i class="fa fa-eye"></i></a> &nbsp;';
                $action .= '<a href="javascript:setUpdate('.$data->id.')" class="btn btn-xs btn-primary" title="Chỉnh sửa"><i class="fa fa-edit"></i></a> &nbsp;';
                $action .= '<a href="javascript:setDelete('.$data->id.')" class="btn btn-xs btn-danger" title="Xóa"><i class="fa fa-times"></i> </a> &nbsp;';

                return $action;
            })
            ->make(TRUE);

        return $dbResult;
    }
    public function delete($id)
    {
        \DB::beginTransaction();
        try {
            $data1= new permission_role();
            \DB::delete('delete from permission_role where role_id = '.$id);
        } catch (\Exception $e) {
            \DB::rollBack();
            return $this->response->errorInternal($e->getMessage());
        }
        try {
            $data= new role();
            $data->destroy($id);
        } catch (\Exception $e) {
            \DB::rollBack();
            return $this->response->errorInternal($e->getMessage());
        }

        \DB::commit();
        return parent::responseCreated($data); // TODO: Change the autogenerated stub
    }
    public static function get(){

    $data= \DB::table('roles')->pluck('name','id')->toArray();
    return $data;
//$shop->permission()->attach('4');


//$shop->permission()->detach('4');
    }
    public static function get_byid($id){

        $data= \DB::table('roles')->where('id',$id)->get();
        return $data;
//$shop->permission()->attach('4');


//$shop->permission()->detach('4');
    }
}
